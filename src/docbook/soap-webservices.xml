<?xml version="1.0" encoding="UTF-8"?>
<chapter id="soap-webservices">
    <title>SOAP WebServices</title>

    <para>In case you need to connect to a SOAP WebService you can use the built-in WebServices support in Citrus. Similar
    to the Http support Citrus is able to send and receive SOAP messages during a test.</para>
    
    <note>
        <para>In order to use the SOAP WebService support you need to include the specific XML configuration schema provided by Citrus.
        See following XML definition to find out how to include the citrus-ws namespace.</para>
        
        <programlisting>
  &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xmlns:citrus=&quot;http://www.citrusframework.org/schema/config&quot;
         xmlns:citrus-ws=&quot;http://www.citrusframework.org/schema/ws/config&quot;
         xsi:schemaLocation=&quot;
         http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
         http://www.citrusframework.org/schema/config 
         http://www.citrusframework.org/schema/config/citrus-config.xsd
         http://www.citrusframework.org/schema/ws/config 
         http://www.citrusframework.org/schema/ws/config/citrus-ws-config.xsd&quot;&gt;
         
      [...]
      
  &lt;/beans&gt;
        </programlisting>
        
        <para>Now you are ready to use the customized WebService configuration elements - all using the citrus-ws prefix - 
        in your Spring configuration.</para>
    </note>
    
    <section id="soap-sender">
        <title>SOAP message sender</title>
        
        <para>Citrus can call any SOAP WebService and validate its response message. Let us see how a message sender for SOAP 
        WebServices looks like in the Spring configuration:</para>
        
        <programlisting>
  &lt;citrus-ws:message-sender id=&quot;soapMessageSender&quot; 
                                 request-url=&quot;http://localhost:8090/test&quot; 
                                 reply-handler=&quot;soapResponseHandler&quot;/&gt;
  
  &lt;citrus-ws:reply-message-handler id=&quot;soapResponseHandler&quot;/&gt;
        </programlisting>
        
        <para>SOAP WebServices always use synchronous communication, so we need a reply message handler. The message sender 
        uses the <emphasis>request-url</emphasis> and and calls the WebService. The sender
        will automatically build a SOAP request message including a SOAP header and the message payload as SOAP body. 
        As the WebService response arrives it is passed to the given reply handler.</para>
    </section>
    
    <section id="soap-server">
        <title>SOAP message receiver</title>
        
        <para>Receiving SOAP messages requires a web server instance listening on a port. Citrus is using an embedded Jetty 
        server instance in combination with the Spring WebService project in order to accept SOAP request calls. See how the 
        Jetty server is configured in the Spring configuration.</para>
        
        <programlisting>
  &lt;citrus-ws:jetty-server id=&quot;simpleJettyServer&quot; 
                     port=&quot;8091&quot; 
                     auto-start=&quot;true&quot;
                     context-config-location=&quot;classpath:citrus-ws-servlet.xml&quot;
                     resource-base=&quot;src/citrus/resources&quot;/&gt;
        </programlisting>
        
        <para>The Jetty server is able to startup automatically during application startup. In the example above the Server is
        listening on the port <literal>8091</literal> for SOAP requests. The context-config-location attribute defines a further Spring
        application context. In this application context the request mapping is configured. See the example below.</para>
        
        <programlisting>
  &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;
         http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;
      
    &lt;bean id=&quot;loggingInterceptor&quot; 
    class=&quot;org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor&quot;&gt;
        &lt;description&gt;
            This interceptor logs the message payload.
        &lt;/description&gt;
    &lt;/bean&gt;
      
    &lt;bean id=&quot;helloServicePayloadMapping&quot; 
    class=&quot;org.springframework.ws.server.endpoint.mapping.PayloadRootQNameEndpointMapping&quot;&gt;
        &lt;property name=&quot;mappings&quot;&gt;
            &lt;props&gt;
                &lt;prop 
                    key=&quot;{http://www.consol.de/schemas/sayHello}HelloStandaloneRequest&quot;&gt;
                    helloServiceEndpoint
                &lt;/prop&gt;
            &lt;/props&gt;
        &lt;/property&gt;
        &lt;property name=&quot;interceptors&quot;&gt;
            &lt;list&gt;
                &lt;ref bean=&quot;loggingInterceptor&quot;/&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
      
    &lt;bean id=&quot;helloServiceEndpoint&quot; 
         class=&quot;com.consol.citrus.ws.WebServiceEndpoint&quot;&gt;
        &lt;property name=&quot;messageHandler&quot;&gt;
          &lt;bean 
          class=&quot;com.consol.citrus.adapter.handler.StaticResponseProducingMessageHandler&quot;&gt;
              &lt;property name=&quot;messagePayload&quot;&gt;
                  &lt;value&gt;
                  &lt;![CDATA[
                      &lt;ns0:HelloStandaloneResponse 
                          xmlns:ns0=&quot;http://www.consol.de/schemas/sayHello&quot;&gt;
                          &lt;ns0:MessageId&gt;123456789&lt;/ns0:MessageId&gt;
                          &lt;ns0:CorrelationId&gt;CORR123456789&lt;/ns0:CorrelationId&gt;
                          &lt;ns0:User&gt;WebServer&lt;/ns0:User&gt;
                          &lt;ns0:Text&gt;Hello User&lt;/ns0:Text&gt;
                      &lt;/ns0:HelloStandaloneResponse&gt;
                  ]]&gt;
                  &lt;/value&gt;
              &lt;/property&gt;
              &lt;property name=&quot;messageHeader&quot;&gt;
                  &lt;map&gt;
                      &lt;entry 
                          key=&quot;{http://www.consol.de/schemas/sayHello}ns0:Operation&quot; 
                          value=&quot;sayHelloResponse&quot;/&gt;
                      &lt;entry 
                          key=&quot;{http://www.consol.de/schemas/sayHello}ns0:Request&quot; 
                          value=&quot;HelloRequest&quot;/&gt;
                      &lt;entry 
                          key=&quot;{http://www.consol.de/schemas/sayHello}ns0:SOAPAction&quot; 
                          value=&quot;sayHello&quot;/&gt;
                  &lt;/map&gt;
              &lt;/property&gt;
          &lt;/bean&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
  &lt;/beans&gt;
        </programlisting>
        
        <para>The program listing above describes a normal request mapping. The mapping is responsible to forward incoming requests to
        an endpoint which will handle the request and provide a response. First of all Spring's logging interceptor is added to the 
        context. Then we use a payload mapping (PayloadRootQNameEndpointMapping) in order to map all incoming 
        <literal>'HelloStandaloneRequest'</literal> SOAP messages to the <literal>'helloServiceEndpoint'</literal>. The enpoint definition
        follows at the very end of the program listing. Inside the endpoint configuration we can see the well known message handler that 
        is responsible for providing a proper response message for the client. The various message handlers in Citrus were already 
        described in <xref linkend="http"/>.</para>
        
        <para>In this example the <literal>'helloServiceEndpoint'</literal> uses the <literal>'StaticResponseProducingMessageHandler'</literal>
        which is always returning a static response message. The endpoint transforms the static response into a 
        proper SOAP message that is sent back to the calling client as SOAP response. You can add as many request mappings and endpoints
        as you want to the server context configuration. So you are able to handle different request types with one single Jetty server
        instance.</para>
        
        <para>Have a look at the <xref linkend="http"/> in order to find out how the other available message handler work.</para>
        
        <para>That's it for connecting with SOAP WebServices! We saw how to send and receive SOAP messages with Jetty and 
        Spring WebServices. Have a look at the samples coming with your Citrus archive in order to learn more about the SOAP message handlers.</para>
    </section>
    
    <section id="soap-fault-validation">
        <title>SOAP fault validation</title>
        
        <para>In case you receive SOAP messages from a WebService endpoint you may also want to validate special SOAP faults 
        in error situations. Citrus can validate SOAP faults with SOAP fault code and fault string values.</para>
        
        <para>By default the sending action in Citrus may throw a specific exception when the SOAP response contains a SOAP fault element
        (SoapFaultClientException). A tester can assert this kind of exception in a test case in order to expect the SOAP error.</para>
        
        <programlisting>
    &lt;assert class=&quot;org.springframework.ws.soap.client.SoapFaultClientException&quot;&gt;
        &lt;send with=&quot;webServiceHelloRequestSender&quot;&gt;
            &lt;message&gt;
                &lt;data&gt;
                    &lt;![CDATA[
                        &lt;ns0:SoapFaultForcingRequest 
                        xmlns:ns0=&quot;http://www.consol.de/schemas/soap&quot;&gt;
                            &lt;ns0:Message&gt;This is invalid&lt;/ns0:Message&gt;
                        &lt;/ns0:SoapFaultForcingRequest&gt;
                    ]]&gt;
                &lt;/data&gt;
            &lt;/message&gt;
        &lt;/send&gt;
    &lt;/assert&gt;
        </programlisting>
        
        <para>The SOAP message sending action is surrounded by a simple assert action. The asserted exception class is the 
        SoapFaultClientException. This means that the test expects the exception to be thrown during the communication. 
        Otherwise the test is failing.</para>
        
        <para>This exception assertion can not offer direct SOAP fault code and fault string validation, because we do not have access
        to the SOAP fault elements. But we can use a special assert implementation for this.</para>
        
        <programlisting>
    &lt;ws:assert fault-code=&quot;{http://www.citrusframework.org/faults}TEC-1001&quot; 
               fault-string=&quot;Invalid request&quot;&gt;
        &lt;send with=&quot;webServiceHelloRequestSender&quot;&gt;
            &lt;message&gt;
                &lt;data&gt;
                    &lt;![CDATA[
                        &lt;ns0:SoapFaultForcingRequest 
                        xmlns:ns0=&quot;http://www.consol.de/schemas/soap&quot;&gt;
                            &lt;ns0:Message&gt;This is invalid&lt;/ns0:Message&gt;
                        &lt;/ns0:SoapFaultForcingRequest&gt;
                    ]]&gt;
                &lt;/data&gt;
            &lt;/message&gt;
        &lt;/send&gt;
    &lt;/ws:assert&gt;
        </programlisting>
        
        <para>The special assert action offers two attributes <emphasis>"fault-code"</emphasis> and <emphasis>"fault-string"</emphasis>, where 
        <emphasis>fault-code</emphasis> is defined as a QName string and is mandatory for the validation. The fault assertion also supports test
        variable replacement as usual (e.g. fault-code=&quot;{http://www.citrusframework.org/faults}${myFaultCode}&quot;).</para>
        
        <important>Notice that the ws:assert action uses a different XML namespace than all other Citrus test actions. Therefore you
        also need to define the additional namespace in your test case. Usually in the root <emphasis>&lt;spring:beans&gt;</emphasis> element you
        simply need to declare the citrus-ws specific namespace.
        
        <programlisting>
  &lt;spring:beans xmlns=&quot;http://www.citrusframework.org/schema/testcase&quot; 
      xmlns:spring=&quot;http://www.springframework.org/schema/beans&quot;
      xmlns:ws=&quot;http://www.citrusframework.org/schema/ws/testcase&quot; 
      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
      http://www.citrusframework.org/schema/testcase 
      http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd
      http://www.citrusframework.org/schema/ws/testcase 
      http://www.citrusframework.org/schema/ws/testcase/citrus-ws-testcase.xsd&quot;&gt;
        </programlisting>
        </important>
    </section>    
</chapter>