<?xml version="1.0" encoding="UTF-8"?>
<chapter id="testsuite">
    <title>Testsuite</title>

    <para>Tests often need to be grouped to test suites. Test suites also provide the functionality to do some work before and after the
    tests are run. Database preparing and cleaning tasks or server starting and stopping fit well into these initialization and cleanup phases 
    of a test suite. In Citrus a test suite is typically defined as Spring bean inside a XML configuration file.</para>
    
    <section id="testsuite-tasks">
        <title>Tasks before, between and after the test run</title>
        
        <para>A tester can influence the behavior of a test suite before, after and during the test run. See the next code example to find
        out how it works:</para>
        
        <programlisting>
  &lt;bean name=&quot;integrationTests&quot; 
           class=&quot;com.consol.citrus.TestSuite&quot;&gt;
      &lt;property name=&quot;tasksBefore&quot;&gt;
          &lt;list&gt;
              <!-- list of actions -->
          &lt;/list&gt;
      &lt;/property&gt;
  
      &lt;property name=&quot;tasksBetween&quot;&gt;
          &lt;list&gt;
              <!-- list of actions -->
          &lt;/list&gt;
      &lt;/property&gt;
  
      &lt;property name=&quot;tasksAfter&quot;&gt;
          &lt;list&gt;
              <!-- list of actions -->
          &lt;/list&gt;
      &lt;/property&gt;
  
  &lt;/bean&gt;
        </programlisting>
        
        <para>The test suite bean is of the type com.consol.citrus.TestSuite and offers the following properties to affect
        the basic behavior:</para>
        
        <itemizedlist mark="opencircle">
            <listitem>
                <para>tasksBefore: List of actions that will be executed before the first test is run</para>
            </listitem>
            <listitem>
                <para>tasksBetween: List of actions that will be executed in between every test</para>
            </listitem>
            <listitem>
                <para>tasksAfter: List of actions that will be executed after the last test has ended</para>
            </listitem>
        </itemizedlist>
        
        <para>The three task-sections before, in between and after the execution of tests are supposed to be used for
        initializing and finishing tasks. All these tasks can easily be adjusted by adding or removing beans inside the &lt;list&gt; 
        element.</para>
        
        <tip>
            <para>The framework offers special startup and shutdown actions that may start and stop server implementations. This might 
            be helpful when dealing with Http servers or WebService containers like Jetty. You can also think of starting/stopping a 
            JMS broker.</para>
            
            <para>A test suite run may require the test environment to be clean. Therefore it is a good idea to purge all JMS destinations
            or clean up the database to avoid errors caused by obsolete data from previous test runs.</para>
            
            <para>Between the tests it also might sound reasonable to purge all JMS queues. In case a test fails the use case processing stops
            and some messages might be left in some JMS queues. The next test then will be confronted with these invalid messages. Purging all JMS
            destinations between the tests is therefore a good idea.</para>
        </tip>
    </section>
    
    <section id="testsuite-include-exclude">
        <title>Include and exclude tests</title>
        
        <para>While using the test framework you will find out that the duration of tests differ according to the purpose of
        the test. Especially timeout tests take a long time. In some cases the tester might not want to execute
        those tests, because it would take too long. Another situation would be that the tester intends to test a
        certain group of tests explicitly and all other tests should not be executed.</para>
        
        <para>In these situations the test suite is very helpful because here you can easily declare include or exclude test cases from a test 
        run.</para>
        
        <para>The following example tries to explain this functionality in detail:</para>
        
        <programlisting>
  &lt;bean name=&quot;testSuite&quot; 
           class=&quot;com.consol.citrus.TestSuite&quot;&gt;
      &lt;property name=&quot;excludeTests&quot;&gt;
          &lt;list&gt;
              &lt;value&gt;*timeout*&lt;/value&gt;
              &lt;value&gt;someTestName&lt;/value&gt;
              &lt;value&gt;startsWith*&lt;/value&gt;
              &lt;value&gt;*endsWith&lt;/value&gt;
          &lt;/list&gt;
      &lt;/property&gt;
      
      &lt;property name=&quot;includeTests&quot;&gt;
          &lt;list&gt;
              &lt;value&gt;*timeout*&lt;/value&gt;
              &lt;value&gt;someTestName&lt;/value&gt;
              &lt;value&gt;startsWith*&lt;/value&gt;
              &lt;value&gt;*endsWith&lt;/value&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;
        </programlisting>
        
        <para>Both properties support name patterns. This means that you can use the wildcard &quot;*&quot; to define name
        patterns as shown in the examples. Be careful to use both including and excluding patterns at the same
        time, because they might overrule each other.</para>
    </section>
    
    <section id="testsuite-multiple">
        <title>Multiple testsuites</title>
        
        <para>Sometimes it is useful to configure more than one of these test suite instances. You can think of test suites for 
        unit testing, integration testing, performance testing and so on. Unit testing might require different actions before
        the test run than integration testing and vice versa.</para>
        
        <para>You can simply define several beans of test suites in the Spring configuration. There could be one test suite
        instance for unit testing and one for integration testing, with their individual configuration like separate
        'tasksBefore' and different including patterns for tests.</para>
        
        <para>By default Citrus will start all available test suite instances in sequence. If you want to
        start a certain instance explicitly you have to declare the name of the instance when starting Citrus.</para>
    </section>
</chapter>