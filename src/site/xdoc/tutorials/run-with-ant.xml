<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Run Citrus using ANT</title>
    <author email="deppisch@consol.de">Christoph Deppisch</author>
  </properties>
  <body>
    <section name="Run Citrus using ANT">
      <p>
        In this how-to tutorial I will use ANT to manage a Citrus project and we will use Ant to execute Citrus test cases. First of all
        I downloaded the latest <a href="../download.html">Citrus release archive</a> with dependencies (citrus-with-dependencies-1.x.zip). 
        I have unzipped the archive to a temporary location on my local storage in order to have access to the Citrus binaries and sources.
      </p>
      
      <p>
        So now lets start to set up a new Citrus Java project. In contrast to a Maven generated project we have to create our project structure 
        ourself when using Ant. So lets have a look at a usual Citrus project structure. I am using the <a href="http://www.eclipse.org/">Eclipse 
        IDE</a> development tool to set up the new Java project. I am also accessing Ant from the command line in this tutorial so you may also 
        want to install Ant first before continuing. See the <a href="http://ant.apache.org/">Ant homepage</a> for detailed installation 
        instructions.
      </p>
      
      <p>Have a look at the folder structure I created for our new Citrus project</p>
    
      <img alt="Project explorer" src="../images/tutorials/ant/project_explorer.png" style="float:left;"/>
            
      <p>
        I created a simple Java project in Eclipse called <i>&quot;citrus-sample&quot;</i>. I manually added folders and files to the project
        as follows. The Citrus project knows three source folders, that are also added to the Java build path as source 
        folders:
        
        <ul>
            <li><u>src/citrus/java:</u> Storage for generated Java TestNG tests</li>
            <li><u>src/citrus/resources:</u> Configuration files go in here (e.g. Spring application context files, citrus.properties, log4j.xml, ...)</li>
            <li><u>src/citrus/tests:</u> XML test case describing files (generated by Citrus)</li>
        </ul>
        
        As a next step I copied all Java libraries that are needed to run with Citrus to the <i>lib</i> folder. This includes the Citrus Java 
        archives (citrus-core-1.x.jar, citrus-http-1.x.jar, ...) coming from the <a href="../download.html">downladed release archive</a> and all 
        dependency libraries also available in the release archive. Finally what's missing is the Ant build file (build.xml) with following content.
      </p>
      
      <source>
  &lt;project name=&quot;citrus-sample&quot; basedir=&quot;.&quot; default=&quot;citrus.run.tests&quot;&gt;
    
      &lt;property file=&quot;src/citrus/resources/citrus.properties&quot;/&gt;
      
      &lt;path id=&quot;citrus-classpath&quot;&gt;
          &lt;fileset dir=&quot;lib&quot;&gt;
              &lt;include name=&quot;*.jar&quot;/&gt;
          &lt;/fileset&gt;
      &lt;/path&gt;
      
      &lt;typedef resource=&quot;citrustasks&quot; classpath=&quot;lib/citrus-ant-tasks-1.0.jar&quot;/&gt;
      
      &lt;target name=&quot;create.test&quot; description=&quot;Creates a new empty test case&quot;&gt;
          &lt;input message=&quot;Enter test name:&quot; addproperty=&quot;test.name&quot;/&gt;
          &lt;input message=&quot;Enter test description:&quot; addproperty=&quot;test.description&quot;/&gt;
          &lt;input message=&quot;Enter author's name:&quot; addproperty=&quot;test.author&quot; defaultvalue=&quot;${default.test.author}&quot;/&gt;
          &lt;input message=&quot;Enter package:&quot; addproperty=&quot;test.package&quot; defaultvalue=&quot;${default.test.package}&quot;/&gt;
  
          &lt;java classname=&quot;com.consol.citrus.util.TestCaseCreator&quot;&gt;
              &lt;classpath refid=&quot;citrus-classpath&quot;/&gt;
              &lt;arg value=&quot;${test.name}&quot;/&gt;
              &lt;arg value=&quot;${test.author}&quot;/&gt;
              &lt;arg value=&quot;${test.description}&quot;/&gt;
              &lt;arg value=&quot;${test.package}&quot;/&gt;
          &lt;/java&gt;
      &lt;/target&gt;
      
      &lt;target name=&quot;citrus.run.tests&quot; description=&quot;Runs all Citrus tests&quot;&gt;
          &lt;citrus suitename=&quot;citrus-samples&quot; package=&quot;com.consol.citrus.*&quot;/&gt;
      &lt;/target&gt;
      
      &lt;target name=&quot;citrus.run.single.test&quot; description=&quot;Runs a single test by name&quot;&gt;
          &lt;touch file=&quot;test.history&quot;/&gt;
          &lt;loadproperties srcfile=&quot;test.history&quot;/&gt;
          
          &lt;echo message=&quot;Last test executed: ${last.test.executed}&quot;/&gt;
          &lt;input message=&quot;Enter test name or leave empty for last test executed:&quot; addproperty=&quot;testclass&quot; defaultvalue=&quot;${last.test.executed}&quot;/&gt;
          
          &lt;propertyfile file=&quot;test.history&quot;&gt;
              &lt;entry key=&quot;last.test.executed&quot; type=&quot;string&quot; value=&quot;${testclass}&quot;/&gt;
          &lt;/propertyfile&gt;
  
          &lt;citrus suitename=&quot;citrus-samples&quot; test=&quot;${testclass}&quot;/&gt;
      &lt;/target&gt;
      
  &lt;/project&gt;
      
      </source>
      
      <p>
        Those who are familiar with Ant will understand this file easily. A Java classpath is defined with its conventional name 
        <i>&quot;citrus-classpath&quot;</i>. The classpath definition includes all Java libraries found inside the lib folder. Besides that the 
        build file declares the Citrus special Ant tasks.
      </p>
      
      <source>
  &lt;typedef resource=&quot;citrustasks&quot; classpath=&quot;lib/citrus-ant-tasks-1.0.jar&quot;/&gt;
      </source>
      
      <p>
        These Citrus Ant task definitions will help to execute Citrus out of a Ant build script. For instance the Ant task will automatically add
        the source folders to the classpath. We will handle the Citrus tasks later in this tutorial in more detail. For now we will start with the
        <i>&quot;create.test&quot;</i> target. This target creates new test cases for your project. So let us give it a try! I execute the 
        &quot;create.test&quot; target from the command line using my seperate Ant installation. To be honest it is more comfortable to use the 
        built-in Eclipse Ant plugin to execute Ant targets, but I choose the command line first to be more independent from the IDE tool.
      </p>
      
      <p>
        The target will prompt for some information when executed, see the output below:
      </p>
      
      <source>
  $ ant create.test
  Buildfile: build.xml

  create.test:
      [input] Enter test name: MyFirstTest
      [input] Enter test description: This is my first Citrus test
      [input] Enter author's name: [Christoph]
      [input] Enter package: [com.consol.citrus.ant.sample]
  
  BUILD SUCCESSFUL
  Total time: 21 seconds
      </source>
      
      <p>
        The target will ask you for the name of the test first. After that you give a description for the test. The author's default name is 
        located in the <i>&quot;citrus.properties&quot;</i>, but you can also specify another author of course. Same thing with the test's package. 
        In the <i>&quot;citrus.properties&quot;</i> you can define a default package or you can type in another package when prompted.
      </p>
      
      <p>
        Now that we have given all information for the test Citrus will create all test files automatically. Let us have a look at the 
        generated files.
      </p>
      
      <img alt="Created test files" src="../images/tutorials/ant/created_test_files.png" style="float:left;"/>
      
      <p>  
        The generated files are:
        <ul>
            <li><u>src/citrus/java/MyFirstTest.java:</u> TestNG Java test case that is executable right now</li>
            <li><u>src/citrus/tests/MyFirstTest.xml:</u> Citrus XML test case describing file</li>
        </ul>
        
        With these two files you are able to run the test. Let us first have a look at the generated XML test description:
      </p>
      
      <source>
  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
  &lt;spring:beans xmlns=&quot;http://www.citrusframework.org/schema/testcase&quot; 
                   xmlns:spring=&quot;http://www.springframework.org/schema/beans&quot; 
                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
                   xsi:schemaLocation=&quot;
                   http://www.springframework.org/schema/beans 
                   http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
                   http://www.citrusframework.org/schema/testcase 
                   http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd&quot;&gt;
                   
      &lt;testcase name=&quot;MyFirstTest&quot;&gt;
          &lt;meta-info&gt;
              &lt;author&gt;Christoph&lt;/author&gt;
              &lt;creationdate&gt;2009-08-19&lt;/creationdate&gt;
              &lt;status&gt;DRAFT&lt;/status&gt;
              &lt;last-updated-by&gt;Christoph&lt;/last-updated-by&gt;
              &lt;last-updated-on&gt;2009-08-19T11:18:06&lt;/last-updated-on&gt;
          &lt;/meta-info&gt;
          
          &lt;description&gt;This is my first Citrus test&lt;/description&gt;
          
          &lt;actions&gt;
              &lt;echo&gt;
                  &lt;message&gt;TODO: Code the test MyFirstTest&lt;/message&gt;
              &lt;/echo&gt;
          &lt;/actions&gt;
      &lt;/testcase&gt;
  &lt;/spring:beans&gt;
      </source>
      
      <p>
        Citrus created an empty test case that does nothing but print a simple message to the console. The test is in status &quot;DRAFT&quot; 
        which means it is not finished yet but be aware that the test is executable in this state. In case you need to disable the test
        because it is not entirely finished yet and may cause failures in a test run you can use the status DISABLED. You may code the test first 
        and then change its status to &quot;FINAL&quot; in order to finally enable the test for execution. Right now we do not want to code any additional 
        logic into the test case for this tutorial, so we change its status right now to &quot;FINAL&quot; and try to execute the test with Ant.
      </p>
      
      <p>
        We switch again to the command line to execute the Ant target called <i>&quot;citrus.run.single.test&quot;</i>. We are asked to type 
        in the name of the test to execute. In our example we type <i>&quot;MyFirstTest&quot;</i> and Citrus will execute the test.
      </p>
      
      <source>
  $ ant citrus.run.single.test
  Buildfile: build.xml
  
  citrus.run.single.test:
  [echo] Last test executed: Unknown
  [input] Enter test name: [Unknown] MyFirstTest
  
  CITRUS TESTFRAMEWORK

  Found test 'com.consol.citrus.ant.sample.MyFirstTest'
  
  RUNNING TESTSUITE citrus-default-testsuite

  ------------------------------------------------------------------------
  INIT
  
  Found 0 tasks in init phase
  ------------------------------------------------------------------------
  INIT successfully
  
  ------------------------------------------------------------------------
  STARTING TEST: MyFirstTest
  Initializing TestCase
  TestCase using the following global variables:
  project.name = Citrus sample
  
  1. action in test chain
  echo TODO: Code the test MyFirstTest
  
  TEST FINISHED: MyFirstTest
  ------------------------------------------------------------------------
  FINISH TESTSUITE citrus-default-testsuite
  ------------------------------------------------------------------------
  ________________________________________________________________________
  
  CITRUS TEST RESULTS
  
    MyFirstTest                                       : successful
  
  Found 1 test cases to execute
  Skipped 0 test cases (0.0%)
  Executed 1 test cases
  Tests failed:            0 (0.0%)
  Tests successfully:      1 (100.0%)
  ________________________________________________________________________
  Found 0 tasks after
  ------------------------------------------------------------------------
  FINISH successfully
      </source>
      
      <p>
        If we have a closer look at the <i>&quot;citrus.run.single.test&quot;</i> target we see how Citrus is called with the special Ant task.
      </p>
      
      <source>
  &lt;citrus suitename=&quot;citrus-samples&quot; test=&quot;MyFirstTest&quot;/&gt;
      </source>
      
      <p>
        The task executes Citrus using the test suite named &quot;citrus-samples&quot;. All we need to run one specific test is to specify its name.
        You can also run multiple test cases when using a space seperated list.
      </p>
      
      <source>
  &lt;citrus suitename=&quot;citrus-samples&quot; test=&quot;MyFirstTest AnotherTest SomeOtherTest&quot;/&gt;
      </source>
      
      <p>
        The execution by test names only is suitable for executing a small amount of test cases. If you want to run a whole package of tests use
        the package notation instead as it is used in the <i>&quot;citrus.run.tests&quot;</i> target.
      </p>
      
      <source>
  &lt;citrus suitename=&quot;citrus-samples&quot; package=&quot;com.consol.citrus.*&quot;/&gt;
      </source>
      
      <p>
        Citrus will now execute all tests in the package &quot;com.consol.citrus&quot;. Also here you are able to run multiple packages by adding
        them to a space seperated list.
      </p>
      
      <source>
  &lt;citrus suitename=&quot;citrus-samples&quot; package=&quot;com.consol.citrus.package 
                                                                com.consol.citrus.someotherpackage&quot;/&gt;
      </source>
      
      <p>
        The last option you have when executing Citrus is a TestNG suite xml file. TestNG can configure test suites via XML. We have a look at a very
        simple testng.xml.
      </p>
      
      <source>
  &lt;!DOCTYPE suite SYSTEM &quot;http://testng.org/testng-1.0.dtd&quot;&gt;
  &lt;suite name=&quot;citrus-samples&quot;&gt;
    &lt;test verbose=&quot;2&quot; name=&quot;com.consol.citrus.ant.sample.MyFirstTest&quot; annotations=&quot;JDK&quot;&gt;
      &lt;classes&gt;
        &lt;class name=&quot;com.consol.citrus.ant.sample.MyFirstTest&quot;/&gt;
      &lt;/classes&gt;
    &lt;/test&gt;
  &lt;/suite&gt;
      </source>
      
      <p>
        The testng.xml is very powerful and you have a lot of options how to group tests together to suites. Citrus can work on those testng.xml
        files when executed with Ant.
      </p>
      
      <source>
  &lt;citrus suitename=&quot;citrus-samples&quot; testngxml=&quot;src/citrus/resources/testng.xml&quot;/&gt;      
      </source>
      
      <p>
        That's it! This is how Citrus connects with a normal Eclipse Java project and Ant. With Ant you can integrate your Citrus tests easily
        in your continuous build environment, so the tests are executed every time something has changed in the code base of your project. 
      </p>
      
    </section>
  </body>
</document>
